<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wangyujie on Wangyujie</title>
    <link>https://wangyujie1207.github.io/</link>
    <description>Recent content in Wangyujie on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 14 Nov 2019 15:52:24 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>检讨书</title>
      <link>https://wangyujie1207.github.io/2019/%E6%A3%80%E8%AE%A8%E4%B9%A6/</link>
      <pubDate>Thu, 14 Nov 2019 15:52:24 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E6%A3%80%E8%AE%A8%E4%B9%A6/</guid>
      <description>

&lt;h1 id=&#34;吵架转身就走是不对的&#34;&gt;吵架转身就走是不对的&lt;/h1&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 拉罗什夫科说过一句富有哲理的话，取得成就时坚持不懈，要比遭到失败时顽强不屈更重要。这似乎解答了我的疑惑。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 一般来说， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 从这个角度来看， 在这种困难的抉择下，本人思来想去，寝食难安。 那么， 日本谚语在不经意间这样说过，不幸可能成为通向幸福的桥梁。这似乎解答了我的疑惑。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;既然如此， 我认为， 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 带着这些问题，我们来审视一下吵架转身就走是不对的。 每个人都不得不面对这些问题。 在面对这种问题时， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 那么， 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这启发了我， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 总结的来说， 歌德在不经意间这样说过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。带着这句话，我们还要更加慎重的审视这个问题： 那么， 吵架转身就走是不对的，到底应该如何实现。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 我们都知道，只要有意义，那么就必须慎重考虑。 富兰克林在不经意间这样说过，读书是易事，思索是难事，但两者缺一，便全无用处。我希望诸位也能好好地体会这句话。 这样看来， 塞涅卡在不经意间这样说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。这句话语虽然很短，但令我浮想联翩。 既然如此， 吵架转身就走是不对的因何而发生？ 黑格尔曾经说过，只有永远躺在泥坑里的人，才不会再掉进坑里。这不禁令我深思。 问题的关键究竟为何。&lt;/p&gt;

&lt;p&gt;　　就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 莎士比亚曾经说过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 那么， 笛卡儿曾经提到过，读一切好书，就是和许多高尚的人谈话。这似乎解答了我的疑惑。 带着这些问题，我们来审视一下吵架转身就走是不对的。 一般来说， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 我们不得不面对一个非常尴尬的事实，那就是， 史美尔斯曾经提到过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这启发了我， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 我认为， 经过上述讨论， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 这样看来， 西班牙曾经提到过，自己的鞋子，自己知道紧在哪里。这启发了我， 吉姆·罗恩说过一句富有哲理的话，要么你主宰生活，要么你被生活主宰。这似乎解答了我的疑惑。 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 吵架转身就走是不对的，到底应该如何实现。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 冯学峰曾经说过，当一个人用工作去迎接光明，光明很快就会来照耀着他。这不禁令我深思。 迈克尔·F·斯特利说过一句富有哲理的话，最具挑战性的挑战莫过于提升自我。这句话语虽然很短，但令我浮想联翩。 而这些并不是完全重要，更加重要的问题是， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 每个人都不得不面对这些问题。 在面对这种问题时， 在这种困难的抉择下，本人思来想去，寝食难安。 每个人都不得不面对这些问题。 在面对这种问题时， 而这些并不是完全重要，更加重要的问题是， 总结的来说， 吵架转身就走是不对的，发生了会如何，不发生又会如何。 我们不得不面对一个非常尴尬的事实，那就是， 那么， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 爱迪生曾经说过，失败也是我需要的，它和成功对我一样有价值。带着这句话，我们还要更加慎重的审视这个问题： 而这些并不是完全重要，更加重要的问题是， 既然如何， 这样看来， 文森特·皮尔曾经说过，改变你的想法，你就改变了自己的世界。带着这句话，我们还要更加慎重的审视这个问题： 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 吵架转身就走是不对的因何而发生？ 爱尔兰曾经说过，越是无能的人，越喜欢挑剔别人的错儿。这启发了我， 总结的来说， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们都知道，只要有意义，那么就必须慎重考虑。 我们都知道，只要有意义，那么就必须慎重考虑。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。&lt;/p&gt;

&lt;p&gt;　　我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 鲁巴金说过一句富有哲理的话，读书是在别人思想的帮助下，建立起自己的思想。这似乎解答了我的疑惑。 培根曾经说过，阅读使人充实，会谈使人敏捷，写作使人精确。这句话语虽然很短，但令我浮想联翩。 带着这些问题，我们来审视一下吵架转身就走是不对的。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 带着这些问题，我们来审视一下吵架转身就走是不对的。 文森特·皮尔曾经说过，改变你的想法，你就改变了自己的世界。带着这句话，我们还要更加慎重的审视这个问题： 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 吵架转身就走是不对的，到底应该如何实现。 这样看来， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 经过上述讨论， 在这种困难的抉择下，本人思来想去，寝食难安。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 问题的关键究竟为何？ 俾斯麦说过一句富有哲理的话，失败是坚忍的最后考验。我希望诸位也能好好地体会这句话。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 而这些并不是完全重要，更加重要的问题是， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 经过上述讨论， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 叔本华说过一句富有哲理的话，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。这启发了我， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 吵架转身就走是不对的，到底应该如何实现。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 问题的关键究竟为何？ 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 一般来讲，我们都必须务必慎重的考虑考虑。 这样看来， 培根曾经说过，合理安排时间，就等于节约时间。带着这句话，我们还要更加慎重的审视这个问题： 吵架转身就走是不对的，发生了会如何，不发生又会如何。&lt;/p&gt;

&lt;p&gt;　　对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 我认为， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 带着这些问题，我们来审视一下吵架转身就走是不对的。 叔本华说过一句富有哲理的话，普通人只想到如何度过时间，有才能的人设法利用时间。这不禁令我深思。 既然如何， 塞涅卡在不经意间这样说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。这句话语虽然很短，但令我浮想联翩。 我们不得不面对一个非常尴尬的事实，那就是， 一般来讲，我们都必须务必慎重的考虑考虑。 问题的关键究竟为何？ 我们不得不面对一个非常尴尬的事实，那就是， 这样看来， 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下吵架转身就走是不对的。 郭沫若曾经提到过，形成天才的决定因素应该是勤奋。这启发了我， 既然如何， 王阳明在不经意间这样说过，故立志者，为学之心也；为学者，立志之事也。这启发了我， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来讲，我们都必须务必慎重的考虑考虑。 吵架转身就走是不对的因何而发生？ 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 那么， 经过上述讨论， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 既然如此， 培根曾经说过，阅读使人充实，会谈使人敏捷，写作使人精确。我希望诸位也能好好地体会这句话。 这样看来， 从这个角度来看， 维龙曾经说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。带着这句话，我们还要更加慎重的审视这个问题。&lt;/p&gt;

&lt;p&gt;　　就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下吵架转身就走是不对的。 总结的来说， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 达·芬奇在不经意间这样说过，大胆和坚定的决心能够抵得上武器的精良。这句话语虽然很短，但令我浮想联翩。 一般来讲，我们都必须务必慎重的考虑考虑。 在这种困难的抉择下，本人思来想去，寝食难安。 塞涅卡曾经提到过，生命如同寓言，其价值不在与长短，而在与内容。这启发了我， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 这样看来， 总结的来说， 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论。
　　博曾经说过，一次失败，只是证明我们成功的决心还够坚强。 维这似乎解答了我的疑惑。 俾斯麦曾经提到过，失败是坚忍的最后考验。这启发了我， 那么， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 吵架转身就走是不对的，到底应该如何实现。 塞涅卡曾经说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。带着这句话，我们还要更加慎重的审视这个问题： 我们不得不面对一个非常尴尬的事实，那就是， 吵架转身就走是不对的因何而发生？ 这样看来， 而这些并不是完全重要，更加重要的问题是， 查尔斯·史考伯曾经说过，一个人几乎可以在任何他怀有无限热忱的事情上成功。 这句话语虽然很短，但令我浮想联翩。 这样看来， 一般来说， 总结的来说， 莎士比亚在不经意间这样说过，那脑袋里的智慧，就像打火石里的火花一样，不去打它是不肯出来的。我希望诸位也能好好地体会这句话。 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 罗素·贝克在不经意间这样说过，一个人即使已登上顶峰，也仍要自强不息。这似乎解答了我的疑惑。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 每个人都不得不面对这些问题。 在面对这种问题时， 在这种困难的抉择下，本人思来想去，寝食难安。 别林斯基说过一句富有哲理的话，好的书籍是最贵重的珍宝。这句话语虽然很短，但令我浮想联翩。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 史美尔斯曾经说过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这似乎解答了我的疑惑。 既然如何， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 而这些并不是完全重要，更加重要的问题是， 经过上述讨论， 拉罗什夫科曾经提到过，取得成就时坚持不懈，要比遭到失败时顽强不屈更重要。这不禁令我深思。 既然如此， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 每个人都不得不面对这些问题。 在面对这种问题时， 既然如何， 郭沫若在不经意间这样说过，形成天才的决定因素应该是勤奋。带着这句话，我们还要更加慎重的审视这个问题： 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 在这种困难的抉择下，本人思来想去，寝食难安。 莎士比亚曾经说过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 吵架转身就走是不对的，到底应该如何实现。 我们不得不面对一个非常尴尬的事实，那就是， 吵架转身就走是不对的因何而发生？ 笛卡儿在不经意间这样说过，阅读一切好书如同和过去最杰出的人谈话。这句话语虽然很短，但令我浮想联翩。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 一般来讲，我们都必须务必慎重的考虑考虑。 这样看来， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 卡莱尔说过一句富有哲理的话，过去一切时代的精华尽在书中。这句话语虽然很短，但令我浮想联翩。 每个人都不得不面对这些问题。 在面对这种问题时， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 富兰克林曾经提到过，读书是易事，思索是难事，但两者缺一，便全无用处。这似乎解答了我的疑惑。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 而这些并不是完全重要，更加重要的问题是， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 问题的关键究竟为何？ 总结的来说， 莎士比亚曾经提到过，本来无望的事，大胆尝试，往往能成功。带着这句话，我们还要更加慎重的审视这个问题： 既然如此， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 总结的来说， 既然如何， 文森特·皮尔在不经意间这样说过，改变你的想法，你就改变了自己的世界。这启发了我， 一般来说， 一般来说， 我们不得不面对一个非常尴尬的事实，那就是， 一般来说， 我认为， 这样看来， 我认为， 别林斯基曾经说过，好的书籍是最贵重的珍宝。我希望诸位也能好好地体会这句话。 吵架转身就走是不对的因何而发生？ 在这种困难的抉择下，本人思来想去，寝食难安。 经过上述讨论， 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 问题的关键究竟为何？ 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 拉罗什福科在不经意间这样说过，我们唯一不会改正的缺点是软弱。这句话语虽然很短，但令我浮想联翩。 既然如此， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 既然如此， 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 那么， 总结的来说， 在这种困难的抉择下，本人思来想去，寝食难安。 既然如何， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 莎士比亚曾经提到过，意志命运往往背道而驰，决心到最后会全部推倒。这不禁令我深思。 一般来讲，我们都必须务必慎重的考虑考虑。 吵架转身就走是不对的因何而发生？ 那么， 吵架转身就走是不对的因何而发生？ 那么， 吵架转身就走是不对的，到底应该如何实现。 经过上述讨论， 鲁巴金在不经意间这样说过，读书是在别人思想的帮助下，建立起自己的思想。这不禁令我深思。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 而这些并不是完全重要，更加重要的问题是， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 一般来说， 既然如此， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 孔子说过一句富有哲理的话，知之者不如好之者，好之者不如乐之者。带着这句话，我们还要更加慎重的审视这个问题。
　　那么， 孔子说过一句富有哲理的话，知之者不如好之者，好之者不如乐之者。这启发了我， 一般来说， 那么， 问题的关键究竟为何？ 问题的关键究竟为何？ 从这个角度来看， 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 吵架转身就走是不对的，发生了会如何，不发生又会如何。 俾斯麦在不经意间这样说过，对于不屈不挠的人来说，没有失败这回事。这似乎解答了我的疑惑。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。&lt;/p&gt;

&lt;p&gt;　　吵架转身就走是不对的因何而发生？ 从这个角度来看， 在这种困难的抉择下，本人思来想去，寝食难安。 总结的来说， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 在这种困难的抉择下，本人思来想去，寝食难安。 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 问题的关键究竟为何？ 拿破仑·希尔曾经提到过，不要等待，时机永远不会恰到好处。这句话语虽然很短，但令我浮想联翩。 美华纳曾经提到过，勿问成功的秘诀为何，且尽全力做你应该做的事吧。这启发了我， 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 经过上述讨论， 贝多芬曾经提到过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这不禁令我深思。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 从这个角度来看， 我认为， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 一般来讲，我们都必须务必慎重的考虑考虑。 我们不得不面对一个非常尴尬的事实，那就是， 洛克说过一句富有哲理的话，学到很多东西的诀窍，就是一下子不要学很多。这启发了我， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 培根曾经说过，深窥自己的心，而后发觉一切的奇迹在你自己。这似乎解答了我的疑惑。 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 我认为， 吵架转身就走是不对的，发生了会如何，不发生又会如何。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 莎士比亚曾经说过，意志命运往往背道而驰，决心到最后会全部推倒。带着这句话，我们还要更加慎重的审视这个问题： 这样看来， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 问题的关键究竟为何？ 带着这些问题，我们来审视一下吵架转身就走是不对的。 一般来讲，我们都必须务必慎重的考虑考虑。 带着这些问题，我们来审视一下吵架转身就走是不对的。 吵架转身就走是不对的因何而发生？ 洛克在不经意间这样说过，学到很多东西的诀窍，就是一下子不要学很多。这不禁令我深思。 那么， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 而这些并不是完全重要，更加重要的问题是， 普列姆昌德在不经意间这样说过，希望的灯一旦熄灭，生活刹那间变成了一片黑暗。这启发了我， 一般来讲，我们都必须务必慎重的考虑考虑。 我们都知道，只要有意义，那么就必须慎重考虑。 洛克说过一句富有哲理的话，学到很多东西的诀窍，就是一下子不要学很多。这启发了我， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 非洲曾经说过，最灵繁的人也看不见自己的背脊。这似乎解答了我的疑惑。 一般来讲，我们都必须务必慎重的考虑考虑。 我认为， 一般来讲，我们都必须务必慎重的考虑考虑。 一般来说， 德谟克利特曾经提到过，节制使快乐增加并使享受加强。这不禁令我深思。 非洲说过一句富有哲理的话，最灵繁的人也看不见自己的背脊。这启发了我， 我们都知道，只要有意义，那么就必须慎重考虑。 一般来说， 孔子在不经意间这样说过，知之者不如好之者，好之者不如乐之者。这不禁令我深思。 在这种困难的抉择下，本人思来想去，寝食难安。 既然如何， 经过上述讨论， 奥普拉·温弗瑞在不经意间这样说过，你相信什么，你就成为什么样的人。这句话语虽然很短，但令我浮想联翩。 吵架转身就走是不对的因何而发生？ 那么， 我们都知道，只要有意义，那么就必须慎重考虑。 王阳明说过一句富有哲理的话，故立志者，为学之心也；为学者，立志之事也。这不禁令我深思。 我认为， 我们都知道，只要有意义，那么就必须慎重考虑。 吵架转身就走是不对的因何而发生？ 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。&lt;/p&gt;

&lt;p&gt;　　一般来说， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 这样看来， 吵架转身就走是不对的，发生了会如何，不发生又会如何。 那么， 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 而这些并不是完全重要，更加重要的问题是， 那么， 总结的来说， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 希腊曾经说过，最困难的事情就是认识自己。我希望诸位也能好好地体会这句话。 从这个角度来看， 而这些并不是完全重要，更加重要的问题是， 从这个角度来看， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论， 带着这些问题，我们来审视一下吵架转身就走是不对的。 带着这些问题，我们来审视一下吵架转身就走是不对的。&lt;/p&gt;

&lt;p&gt;　　对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 莫扎特曾经说过，谁和我一样用功，谁就会和我一样成功。带着这句话，我们还要更加慎重的审视这个问题： 德谟克利特曾经说过，节制使快乐增加并使享受加强。这句话语虽然很短，但令我浮想联翩。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 每个人都不得不面对这些问题。 在面对这种问题时， 吵架转身就走是不对的，发生了会如何，不发生又会如何。 一般来说， 乌申斯基说过一句富有哲理的话，学习是劳动，是充满思想的劳动。这启发了我， 一般来讲，我们都必须务必慎重的考虑考虑。 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 所谓吵架转身就走是不对的，关键是吵架转身就走是不对的需要如何写。 经过上述讨论， 在这种困难的抉择下，本人思来想去，寝食难安。 既然如此， 一般来讲，我们都必须务必慎重的考虑考虑。 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 我们都知道，只要有意义，那么就必须慎重考虑。 这样看来， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 而这些并不是完全重要，更加重要的问题是， 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 一般来讲，我们都必须务必慎重的考虑考虑。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 问题的关键究竟为何？ 既然如此， 塞涅卡说过一句富有哲理的话，生命如同寓言，其价值不在与长短，而在与内容。这启发了我， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 这样看来， 既然如此， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 王阳明曾经提到过，故立志者，为学之心也；为学者，立志之事也。这不禁令我深思。 我们不得不面对一个非常尴尬的事实，那就是， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 经过上述讨论， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 邓拓说过一句富有哲理的话，越是没有本领的就越加自命不凡。这句话语虽然很短，但令我浮想联翩。 鲁巴金曾经提到过，读书是在别人思想的帮助下，建立起自己的思想。我希望诸位也能好好地体会这句话。 西班牙曾经说过，自知之明是最难得的知识。这句话语虽然很短，但令我浮想联翩。 那么， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 带着这些问题，我们来审视一下吵架转身就走是不对的。 既然如何， 问题的关键究竟为何？ 从这个角度来看， 既然如此， 叔本华曾经提到过，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。这似乎解答了我的疑惑。 我们不得不面对一个非常尴尬的事实，那就是， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 问题的关键究竟为何？ 一般来讲，我们都必须务必慎重的考虑考虑。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 我们不得不面对一个非常尴尬的事实，那就是， 一般来说， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 吵架转身就走是不对的，到底应该如何实现。 一般来说， 康德说过一句富有哲理的话，既然我已经踏上这条道路，那么，任何东西都不应妨碍我沿着这条路走下去。带着这句话，我们还要更加慎重的审视这个问题： 那么， 吵架转身就走是不对的因何而发生？ 歌德曾经说过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。这似乎解答了我的疑惑。 既然如此， 既然如此， 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 而这些并不是完全重要，更加重要的问题是， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 问题的关键究竟为何？ 我们不得不面对一个非常尴尬的事实，那就是， 鲁巴金曾经说过，读书是在别人思想的帮助下，建立起自己的思想。这句话语虽然很短，但令我浮想联翩。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 05 Nov 2019 13:24:31 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>

&lt;h2 id=&#34;什么是多线程&#34;&gt;什么是多线程&lt;/h2&gt;

&lt;p&gt;多线程是指在同一程序中有多个顺序流在执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;什么是线程&lt;/li&gt;
&lt;li&gt;为什么需要多线程&lt;/li&gt;
&lt;li&gt;Java中的线程表示&lt;/li&gt;
&lt;li&gt;多线程问题的来源&lt;/li&gt;
&lt;li&gt;多线程的适用场景&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;同步与异步&#34;&gt;同步与异步&lt;/h3&gt;

&lt;p&gt;同步和异步关注的是消息通信机制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所谓同步，就是在发出一个调用时，会一直等待调用的返回结果。&lt;/li&gt;
&lt;li&gt;而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;阻塞与非阻塞&#34;&gt;阻塞与非阻塞&lt;/h3&gt;

&lt;p&gt;阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。&lt;/li&gt;
&lt;li&gt;非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;为什么需要多线程&#34;&gt;为什么需要多线程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;因为java的执行模型：最初是同步/阻塞的，且默认情况下只有一个线程，但是事件太多会导致等待时间过长或当线程被挂起会导致后面的事务无法进行，因此需要多线程。&lt;/li&gt;
&lt;li&gt;CPU快，现代CPU都是多核，因此可以通过多线程来提高性能问题&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;CPU进程的时间：由操作系统决定CPU每一个进程每一个线程可以占据多少时间，如果超时，CPU会强制让它终止去执行下一个。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;java中的线程表示&#34;&gt;Java中的线程表示&lt;/h2&gt;

&lt;h3 id=&#34;thread&#34;&gt;Thread&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java中只有这么⼀种东⻄代表线程&lt;/li&gt;
&lt;li&gt;start⽅法才能并发执⾏！

&lt;ul&gt;
&lt;li&gt;start方法执行，无需等待&lt;/li&gt;
&lt;li&gt;run方法执行，等待完成再做下件事情，必须要start，不然创建了线程也没有并行执行&lt;/li&gt;
&lt;li&gt;新的线程入口是run&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;每多开⼀个线程，就多⼀个执⾏流&lt;/li&gt;
&lt;li&gt;多线程执行时是乱序的&lt;/li&gt;
&lt;li&gt;⽅法栈(局部变量)是线程私有的&lt;/li&gt;
&lt;li&gt;静态变量/类变量是被所有线程共享的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多线程带来的问题&#34;&gt;多线程带来的问题&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;多线程的难点是，变量被所有线程共享时候，可能会出问题，譬如多线程执行i++，因为i++不是原子操作。
一段代码可能同时有多个线程执行，是问题的来源。如线程1和线程2共同执行i++，因为变量不是原子的，将i写回时可能导致值就出问题了
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;多线程的生命周期&#34;&gt;多线程的生命周期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/thread.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;多线程使用的目的&#34;&gt;多线程使用的目的&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;吞吐量：做WEB，容器帮你做了多线程，但是它只能帮你做请求层面的，简单的说，就是一个请求一个线程(如struts2，是多线程的，每个客户端请求创建一个实例，保证线程安全)，或多个请求一个线程，如果是单线程，那只能是处理一个用户的请求&lt;/li&gt;
&lt;li&gt;伸缩性：通过增加CPU核数来提升性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多线程的适用场景&#34;&gt;多线程的适用场景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;常见的浏览器、Web服务(现在写的web是中间件帮你完成了线程的控制)，web处理请求，各种专用服务器(如游戏服务器)&lt;/li&gt;
&lt;li&gt;servlet多线程&lt;/li&gt;
&lt;li&gt;FTP下载，多线程操作文件&lt;/li&gt;
&lt;li&gt;数据库用到的多线程&lt;/li&gt;
&lt;li&gt;分布式计算&lt;/li&gt;
&lt;li&gt;tomcat，tomcat内部采用多线程，上百个客户端访问同一个WEB应用，tomcat接入后就是把后续的处理扔给一个新的线程来处理，这个新的线程最后调用我们的servlet程序，比如doGet或者dpPost方法&lt;/li&gt;
&lt;li&gt;后台任务：如定时向大量(100W以上)的用户发送邮件；定期更新配置文件、任务调度(如quartz)，一些监控用于定期信息采集&lt;/li&gt;
&lt;li&gt;自动作业处理：比如定期备份日志、定期备份数据库&lt;/li&gt;
&lt;li&gt;异步处理：如发微博、记录日志&lt;/li&gt;
&lt;li&gt;页面异步处理：比如大批量数据的核对工作(有10万个手机号码，核对哪些是已有用户)&lt;/li&gt;
&lt;li&gt;数据库的数据分析(待分析的数据太多)，数据迁移&lt;/li&gt;
&lt;li&gt;多步骤的任务处理，可根据步骤特征选用不同个数和特征的线程来协作处理，多任务的分割，由一个主线程分割给多个线程完成&lt;/li&gt;
&lt;li&gt;desktop应用开发，一个费时的计算开个线程，前台加个进度条显示&lt;/li&gt;
&lt;li&gt;swing编程&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Collection初步接触</title>
      <link>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Tue, 29 Oct 2019 13:53:28 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;java集合的集成体系&#34;&gt;Java集合的集成体系&lt;/h1&gt;

&lt;p&gt;Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。一张图看出Java collection的重要性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;list&#34;&gt;List&lt;/h3&gt;

&lt;p&gt;list add时,容量看起来无限,实际内部进行了扩容,扩容大小为当前容量的一半&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不允许出现重复的元素&lt;/li&gt;
&lt;li&gt;集合中的元素位置无顺序&lt;/li&gt;
&lt;li&gt;有且只有一个值为null的元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为set是一个抽象的接口，所以不能直接实例化一个set对象。（Set s = new Set()是错误的）&lt;/p&gt;

&lt;p&gt;Set接口的两大实现：HashSet、TreeSet&lt;/p&gt;

&lt;p&gt;HashSet 是无序的，如果要保持顺序，可以使用LinkedHashSet.&lt;/p&gt;

&lt;h3 id=&#34;hashmap和hashset&#34;&gt;HashMap和HashSet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HashSet

&lt;ul&gt;
&lt;li&gt;HashSet实现了Set接口，不允许集合中有重复的值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HashMap

&lt;ul&gt;
&lt;li&gt;HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键&lt;/li&gt;
&lt;li&gt;Map接口的俩个基本实现：HashMap和TreeMap，TreeMap保存了对象的排列次序，而HashMap则不能。&lt;/li&gt;
&lt;li&gt;HashMap允许键和值为null&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection中常用的方法&#34;&gt;Collection中常用的方法&lt;/h3&gt;

&lt;p&gt;Guava 集合工具类库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//添加方法：
add(Object o) //添加指定元素
addAll(Collection c) //添加指定集合
//删除方法：
remove(Object o) //删除指定元素
removeAll(Collection c) //输出两个集合的交集
retainAll(Collection c) //保留两个集合的交集
clear() //清空集合
//查询方法：
size() //集合中的有效元素个数
toArray() //将集合中的元素转换成Object类型数组
//判断方法：
isEmpty() //判断是否为空
equals(Object o) //判断是否与指定元素相同
contains(Object o) //判断是否包含指定元素
containsAll(Collection c) //判断是否包含指定集合
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arraylist中特有的方法&#34;&gt;ArrayList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ensureCapacity(int minCapactiy) //判断当前数组中的元素个数是否大于指定的minCapacity
trimToSize() //修改数组容量为当前数组有效元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linkedlist中特有的方法&#34;&gt;LinkedList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//查询方法：
getFirst() //获取集合中的第一个元素
getLast() //获取集合中的最后一个元素
//添加方法：
addFirst(Object o) //在集合的第一个位置添加指定元素
addLast(Object o) //在集合的最后一个位置添加指定元素
//删除方法：
removeFirst() //删除集合中的第一个元素
removeLast() //删除集合中的最后一个元素
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Maven与Java包的初级接触</title>
      <link>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Mon, 28 Oct 2019 13:46:32 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;什么是maven&#34;&gt;什么是maven&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Maven是一个采用纯Java编写的开源项目管理工具, Maven采用了一种被称之为
Project Object Model (POM)概念来管理项目，所有的项目配置信息都被定
义在一个叫做POM.xml的文件中..
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;仓库&#34;&gt;仓库&lt;/h1&gt;

&lt;h2 id=&#34;本地仓库&#34;&gt;本地仓库&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maven会把我们项目所构建出来的jar包等等资源存放在本地仓库中。当我们需要jar包的时候，Maven第一时间也是去本地仓库中寻找jar包&lt;/p&gt;

&lt;h2 id=&#34;中心仓库&#34;&gt;中心仓库&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 当Maven在本地仓库和私服找不到我们需要的jar包的时候，就去中心仓库中帮我们下载对应的jar包**。那Maven怎么知道去哪里下载呢？？其实Maven已经配置好的了
apache-maven-3.2.1\lib\maven-model-builder-3.2.1\org\apache\maven\model下的POM.xml文件中已经配置好了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven坐标&#34;&gt;maven坐标&lt;/h2&gt;

&lt;h4 id=&#34;坐标的组成-groupid-artifactid-version&#34;&gt;坐标的组成： groupId + artifactId+ version&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;* groupId：组id ,机构名，公司名：好比公司的id，或者是公司包名 alibaba ——-》高德--》5.01版本
* artifactId：构建物id ，产品名或者产品的id
* version ：版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;jar包组成-artifactid-version-jar&#34;&gt;jar包组成： artifactId-version.jar&lt;/h4&gt;

&lt;p&gt;scope应用范围有test、compile等等，默认是compile，那么test和compile有什么区别呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;间接依赖问题 ：依赖的jar包必须是 compile 范围，假如是test范围，则发布的jar包不会包含test范围依赖的jar包，和依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;java的包管理机制&#34;&gt;Java的包管理机制&lt;/h1&gt;

&lt;p&gt;##. 什么是包
* JVM的工作被设计得相当简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 执行一个类的字节码
2. 假如这个过程中碰到了新的类，加载他
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;那么去哪里加载他呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;类路径-classpath&#34;&gt;类路径（Classpath）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;什么是类路径：-classpath/-cp&lt;/li&gt;
&lt;li&gt;类的全限定类名（目录层级）唯一确定了一个类&lt;/li&gt;
&lt;li&gt;包就是把许多类放在一起打的压缩包&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;classpath-hell&#34;&gt;Classpath hell&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;传递性依赖是指你依赖的类还依赖了别的类&lt;/li&gt;
&lt;li&gt;全限定类名是类的唯一标识&lt;/li&gt;
&lt;li&gt;当多个同名类同时出现在Classpath中，就是噩梦的开始&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;什么是包管理&#34;&gt;什么是包管理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;你要使用一些第三方类，就要告诉JVM从哪里找&lt;/li&gt;
&lt;li&gt;包管理的实质就是告诉JVM如何找到所需的第三方库以及成功地解决其中地冲突问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven-划时代的包管理工具&#34;&gt;Maven——划时代的包管理工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;约定优于配置（Convention over configuration）&lt;/li&gt;
&lt;li&gt;必须强调，Maven远远不止是包管理工具&lt;/li&gt;
&lt;li&gt;Maven的包按照约定为所有的包编号，方便检索，groupId/artifactId/version&lt;/li&gt;
&lt;li&gt;依赖冲突的解决原则：最近的胜出&lt;/li&gt;
&lt;li&gt;当你看到如下异常的时候：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* AbstractMethodError
* NoClassDefFoundError
* ClassNotFoundException
* LinkageError
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;一般就是包冲突了，解决方法：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* 单独声明需要引用的特定包
* 排除掉冲突的包
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://wangyujie1207.github.io/about/</link>
      <pubDate>Sat, 26 Oct 2019 14:24:03 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/about/</guid>
      <description>&lt;p&gt;关于我&lt;/p&gt;

&lt;p&gt;这是一台木得感情的代码机器&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记录一下hugo搭建博客的经历</title>
      <link>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sat, 26 Oct 2019 11:03:42 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>

&lt;h1 id=&#34;安装hugo-参考-hugo搭建-https-gohugo-io&#34;&gt;安装hugo, 参考 &lt;a href=&#34;https://gohugo.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo搭建&lt;/a&gt;;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;mac 安装
homebrew install hugo
hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;开始搭建博客&#34;&gt;开始搭建博客&lt;/h1&gt;

&lt;p&gt;找一个文件夹, hugo new site &amp;lt;网站名&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如果需要部署到github-需要注意一下资源路径&#34;&gt;如果需要部署到GitHub, 需要注意一下资源路径&lt;/h4&gt;

&lt;h4 id=&#34;github页面有两种类型&#34;&gt;GitHub页面有两种类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;我用的第一种&#34;&gt;我用的第一种&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;lt;names&amp;gt;.github.io-creator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;为网站添加一个主题&#34;&gt;为网站添加一个主题&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;names&amp;gt;
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;新建一篇文章&#34;&gt;新建一篇文章&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/&amp;lt;names&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如需要发布文章，记得把draft: true改为draft: false. 参考 &lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;draft&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;预览网站&#34;&gt;预览网站&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网站配置文件是config.toml，如可配置语言选项为languageCode = “zh-Hans”,网站名字等&lt;/p&gt;

&lt;h2 id=&#34;生成静态文件&#34;&gt;生成静态文件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这个就很简单啦, 直接运行hugo命令生成静态网页，放在public目录下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后, 提交public到GitHub 然后开启gh-pages即可预览&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 26 Oct 2019 09:12:06 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>

&lt;h3 id=&#34;大家好&#34;&gt;大家好&lt;/h3&gt;

&lt;p&gt;这是我第一篇博客, 谢谢大家&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>