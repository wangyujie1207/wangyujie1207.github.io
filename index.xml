<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wangyujie on Wangyujie</title>
    <link>https://wangyujie1207.github.io/</link>
    <description>Recent content in Wangyujie on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 19 Feb 2020 20:59:42 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>HTML常用标签</title>
      <link>https://wangyujie1207.github.io/2020/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 19 Feb 2020 20:59:42 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2020/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>

&lt;h3 id=&#34;a标签的用法&#34;&gt;a标签的用法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;什么是a标签?
a标签的作用: 就是用于控制页面与页面之间跳转的
a标签的格式: &amp;lt;a href=&amp;quot;指定需要跳转的目标界面&amp;quot;&amp;gt;需要展现给用户查看的内容&amp;lt;/a&amp;gt;

a标签中有一个叫做target属性, 这个属性的作用就是专门用于控制如何跳转
_self: 用于在当前选项卡中跳转, 也就是不新建界面跳转. 默认就是_self
_blank: 用于在新的选项卡中跳转, 也就是新建界面跳转

a标签中还有一个属性, 叫做title. a标签中的title和img标签中的title一样, 都是用来控制鼠标悬停时显示的提示文本的
鼠标放在链接上面时会出现title，并且利于蜘蛛爬行时抓取，方便蜘蛛识别

注意点:
1.a标签不仅可以让文字可以点击, 还可以让图片也能够被点击
2.一个a标签必须有一个href属性, 否则a标签不知道要跳转到什么地方
3.如果通过a标签的href属性指定一个URL地址, 那么必须在地址前面加上http://或https://
4.a标签的href属性除了可以指定一个网络地址以外, 还可以指定一个本地地址
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;img标签的用法&#34;&gt;img标签的用法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;/i/eg_tulip.jpg&amp;quot;  alt=&amp;quot;上海鲜花港 - 郁金香&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;table定义&#34;&gt;table定义&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;定义和用法
&amp;lt;table&amp;gt; 标签定义 HTML 表格。
简单的 HTML 表格由 table 元素以及一个或多个 tr、th 或 td 元素组成。
tr 元素定义表格行，th 元素定义表头，td 元素定义表格单元。
更复杂的 HTML 表格也可能包括 caption、col、colgroup、thead、tfoot 以及 tbody 元素。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;table标签的用法&#34;&gt;table标签的用法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xhtml&#34;&gt;&amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;th&amp;gt;Month&amp;lt;/th&amp;gt;
    &amp;lt;th&amp;gt;Savings&amp;lt;/th&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;January&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;$100&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 05 Nov 2019 13:24:31 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>

&lt;h2 id=&#34;什么是多线程&#34;&gt;什么是多线程&lt;/h2&gt;

&lt;p&gt;多线程是指在同一程序中有多个顺序流在执行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;什么是线程&lt;/li&gt;
&lt;li&gt;为什么需要多线程&lt;/li&gt;
&lt;li&gt;Java中的线程表示&lt;/li&gt;
&lt;li&gt;多线程问题的来源&lt;/li&gt;
&lt;li&gt;多线程的适用场景&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;同步与异步&#34;&gt;同步与异步&lt;/h3&gt;

&lt;p&gt;同步和异步关注的是消息通信机制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所谓同步，就是在发出一个调用时，会一直等待调用的返回结果。&lt;/li&gt;
&lt;li&gt;而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;阻塞与非阻塞&#34;&gt;阻塞与非阻塞&lt;/h3&gt;

&lt;p&gt;阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。&lt;/li&gt;
&lt;li&gt;非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;为什么需要多线程&#34;&gt;为什么需要多线程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;因为java的执行模型：最初是同步/阻塞的，且默认情况下只有一个线程，但是事件太多会导致等待时间过长或当线程被挂起会导致后面的事务无法进行，因此需要多线程。&lt;/li&gt;
&lt;li&gt;CPU快，现代CPU都是多核，因此可以通过多线程来提高性能问题&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;CPU进程的时间：由操作系统决定CPU每一个进程每一个线程可以占据多少时间，如果超时，CPU会强制让它终止去执行下一个。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;java中的线程表示&#34;&gt;Java中的线程表示&lt;/h2&gt;

&lt;h3 id=&#34;thread&#34;&gt;Thread&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java中只有这么⼀种东⻄代表线程&lt;/li&gt;
&lt;li&gt;start⽅法才能并发执⾏！

&lt;ul&gt;
&lt;li&gt;start方法执行，无需等待&lt;/li&gt;
&lt;li&gt;run方法执行，等待完成再做下件事情，必须要start，不然创建了线程也没有并行执行&lt;/li&gt;
&lt;li&gt;新的线程入口是run&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;每多开⼀个线程，就多⼀个执⾏流&lt;/li&gt;
&lt;li&gt;多线程执行时是乱序的&lt;/li&gt;
&lt;li&gt;⽅法栈(局部变量)是线程私有的&lt;/li&gt;
&lt;li&gt;静态变量/类变量是被所有线程共享的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多线程带来的问题&#34;&gt;多线程带来的问题&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;多线程的难点是，变量被所有线程共享时候，可能会出问题，譬如多线程执行i++，因为i++不是原子操作。
一段代码可能同时有多个线程执行，是问题的来源。如线程1和线程2共同执行i++，因为变量不是原子的，将i写回时可能导致值就出问题了
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;多线程的生命周期&#34;&gt;多线程的生命周期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/thread.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;多线程使用的目的&#34;&gt;多线程使用的目的&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;吞吐量：做WEB，容器帮你做了多线程，但是它只能帮你做请求层面的，简单的说，就是一个请求一个线程(如struts2，是多线程的，每个客户端请求创建一个实例，保证线程安全)，或多个请求一个线程，如果是单线程，那只能是处理一个用户的请求&lt;/li&gt;
&lt;li&gt;伸缩性：通过增加CPU核数来提升性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多线程的适用场景&#34;&gt;多线程的适用场景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;常见的浏览器、Web服务(现在写的web是中间件帮你完成了线程的控制)，web处理请求，各种专用服务器(如游戏服务器)&lt;/li&gt;
&lt;li&gt;servlet多线程&lt;/li&gt;
&lt;li&gt;FTP下载，多线程操作文件&lt;/li&gt;
&lt;li&gt;数据库用到的多线程&lt;/li&gt;
&lt;li&gt;分布式计算&lt;/li&gt;
&lt;li&gt;tomcat，tomcat内部采用多线程，上百个客户端访问同一个WEB应用，tomcat接入后就是把后续的处理扔给一个新的线程来处理，这个新的线程最后调用我们的servlet程序，比如doGet或者dpPost方法&lt;/li&gt;
&lt;li&gt;后台任务：如定时向大量(100W以上)的用户发送邮件；定期更新配置文件、任务调度(如quartz)，一些监控用于定期信息采集&lt;/li&gt;
&lt;li&gt;自动作业处理：比如定期备份日志、定期备份数据库&lt;/li&gt;
&lt;li&gt;异步处理：如发微博、记录日志&lt;/li&gt;
&lt;li&gt;页面异步处理：比如大批量数据的核对工作(有10万个手机号码，核对哪些是已有用户)&lt;/li&gt;
&lt;li&gt;数据库的数据分析(待分析的数据太多)，数据迁移&lt;/li&gt;
&lt;li&gt;多步骤的任务处理，可根据步骤特征选用不同个数和特征的线程来协作处理，多任务的分割，由一个主线程分割给多个线程完成&lt;/li&gt;
&lt;li&gt;desktop应用开发，一个费时的计算开个线程，前台加个进度条显示&lt;/li&gt;
&lt;li&gt;swing编程&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Collection初步接触</title>
      <link>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Tue, 29 Oct 2019 13:53:28 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;java集合的集成体系&#34;&gt;Java集合的集成体系&lt;/h1&gt;

&lt;p&gt;Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。一张图看出Java collection的重要性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;list&#34;&gt;List&lt;/h3&gt;

&lt;p&gt;list add时,容量看起来无限,实际内部进行了扩容,扩容大小为当前容量的一半&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不允许出现重复的元素&lt;/li&gt;
&lt;li&gt;集合中的元素位置无顺序&lt;/li&gt;
&lt;li&gt;有且只有一个值为null的元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为set是一个抽象的接口，所以不能直接实例化一个set对象。（Set s = new Set()是错误的）&lt;/p&gt;

&lt;p&gt;Set接口的两大实现：HashSet、TreeSet&lt;/p&gt;

&lt;p&gt;HashSet 是无序的，如果要保持顺序，可以使用LinkedHashSet.&lt;/p&gt;

&lt;h3 id=&#34;hashmap和hashset&#34;&gt;HashMap和HashSet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HashSet

&lt;ul&gt;
&lt;li&gt;HashSet实现了Set接口，不允许集合中有重复的值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HashMap

&lt;ul&gt;
&lt;li&gt;HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键&lt;/li&gt;
&lt;li&gt;Map接口的俩个基本实现：HashMap和TreeMap，TreeMap保存了对象的排列次序，而HashMap则不能。&lt;/li&gt;
&lt;li&gt;HashMap允许键和值为null&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection中常用的方法&#34;&gt;Collection中常用的方法&lt;/h3&gt;

&lt;p&gt;Guava 集合工具类库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//添加方法：
add(Object o) //添加指定元素
addAll(Collection c) //添加指定集合
//删除方法：
remove(Object o) //删除指定元素
removeAll(Collection c) //输出两个集合的交集
retainAll(Collection c) //保留两个集合的交集
clear() //清空集合
//查询方法：
size() //集合中的有效元素个数
toArray() //将集合中的元素转换成Object类型数组
//判断方法：
isEmpty() //判断是否为空
equals(Object o) //判断是否与指定元素相同
contains(Object o) //判断是否包含指定元素
containsAll(Collection c) //判断是否包含指定集合
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arraylist中特有的方法&#34;&gt;ArrayList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ensureCapacity(int minCapactiy) //判断当前数组中的元素个数是否大于指定的minCapacity
trimToSize() //修改数组容量为当前数组有效元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linkedlist中特有的方法&#34;&gt;LinkedList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//查询方法：
getFirst() //获取集合中的第一个元素
getLast() //获取集合中的最后一个元素
//添加方法：
addFirst(Object o) //在集合的第一个位置添加指定元素
addLast(Object o) //在集合的最后一个位置添加指定元素
//删除方法：
removeFirst() //删除集合中的第一个元素
removeLast() //删除集合中的最后一个元素
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Maven与Java包的初级接触</title>
      <link>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Mon, 28 Oct 2019 13:46:32 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;什么是maven&#34;&gt;什么是maven&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Maven是一个采用纯Java编写的开源项目管理工具, Maven采用了一种被称之为
Project Object Model (POM)概念来管理项目，所有的项目配置信息都被定
义在一个叫做POM.xml的文件中..
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;仓库&#34;&gt;仓库&lt;/h1&gt;

&lt;h2 id=&#34;本地仓库&#34;&gt;本地仓库&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maven会把我们项目所构建出来的jar包等等资源存放在本地仓库中。当我们需要jar包的时候，Maven第一时间也是去本地仓库中寻找jar包&lt;/p&gt;

&lt;h2 id=&#34;中心仓库&#34;&gt;中心仓库&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 当Maven在本地仓库和私服找不到我们需要的jar包的时候，就去中心仓库中帮我们下载对应的jar包**。那Maven怎么知道去哪里下载呢？？其实Maven已经配置好的了
apache-maven-3.2.1\lib\maven-model-builder-3.2.1\org\apache\maven\model下的POM.xml文件中已经配置好了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven坐标&#34;&gt;maven坐标&lt;/h2&gt;

&lt;h4 id=&#34;坐标的组成-groupid-artifactid-version&#34;&gt;坐标的组成： groupId + artifactId+ version&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;* groupId：组id ,机构名，公司名：好比公司的id，或者是公司包名 alibaba ——-》高德--》5.01版本
* artifactId：构建物id ，产品名或者产品的id
* version ：版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;jar包组成-artifactid-version-jar&#34;&gt;jar包组成： artifactId-version.jar&lt;/h4&gt;

&lt;p&gt;scope应用范围有test、compile等等，默认是compile，那么test和compile有什么区别呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;间接依赖问题 ：依赖的jar包必须是 compile 范围，假如是test范围，则发布的jar包不会包含test范围依赖的jar包，和依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;java的包管理机制&#34;&gt;Java的包管理机制&lt;/h1&gt;

&lt;p&gt;##. 什么是包
* JVM的工作被设计得相当简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 执行一个类的字节码
2. 假如这个过程中碰到了新的类，加载他
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;那么去哪里加载他呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;类路径-classpath&#34;&gt;类路径（Classpath）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;什么是类路径：-classpath/-cp&lt;/li&gt;
&lt;li&gt;类的全限定类名（目录层级）唯一确定了一个类&lt;/li&gt;
&lt;li&gt;包就是把许多类放在一起打的压缩包&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;classpath-hell&#34;&gt;Classpath hell&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;传递性依赖是指你依赖的类还依赖了别的类&lt;/li&gt;
&lt;li&gt;全限定类名是类的唯一标识&lt;/li&gt;
&lt;li&gt;当多个同名类同时出现在Classpath中，就是噩梦的开始&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;什么是包管理&#34;&gt;什么是包管理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;你要使用一些第三方类，就要告诉JVM从哪里找&lt;/li&gt;
&lt;li&gt;包管理的实质就是告诉JVM如何找到所需的第三方库以及成功地解决其中地冲突问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven-划时代的包管理工具&#34;&gt;Maven——划时代的包管理工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;约定优于配置（Convention over configuration）&lt;/li&gt;
&lt;li&gt;必须强调，Maven远远不止是包管理工具&lt;/li&gt;
&lt;li&gt;Maven的包按照约定为所有的包编号，方便检索，groupId/artifactId/version&lt;/li&gt;
&lt;li&gt;依赖冲突的解决原则：最近的胜出&lt;/li&gt;
&lt;li&gt;当你看到如下异常的时候：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* AbstractMethodError
* NoClassDefFoundError
* ClassNotFoundException
* LinkageError
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;一般就是包冲突了，解决方法：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* 单独声明需要引用的特定包
* 排除掉冲突的包
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://wangyujie1207.github.io/about/</link>
      <pubDate>Sat, 26 Oct 2019 14:24:03 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/about/</guid>
      <description>&lt;p&gt;关于我&lt;/p&gt;

&lt;p&gt;这是一台木得感情的代码机器&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记录一下hugo搭建博客的经历</title>
      <link>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sat, 26 Oct 2019 11:03:42 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>

&lt;h1 id=&#34;安装hugo-参考-hugo搭建-https-gohugo-io&#34;&gt;安装hugo, 参考 &lt;a href=&#34;https://gohugo.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo搭建&lt;/a&gt;;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;mac 安装
homebrew install hugo
hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;开始搭建博客&#34;&gt;开始搭建博客&lt;/h1&gt;

&lt;p&gt;找一个文件夹, hugo new site &amp;lt;网站名&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如果需要部署到github-需要注意一下资源路径&#34;&gt;如果需要部署到GitHub, 需要注意一下资源路径&lt;/h4&gt;

&lt;h4 id=&#34;github页面有两种类型&#34;&gt;GitHub页面有两种类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;我用的第一种&#34;&gt;我用的第一种&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;lt;names&amp;gt;.github.io-creator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;为网站添加一个主题&#34;&gt;为网站添加一个主题&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;names&amp;gt;
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;新建一篇文章&#34;&gt;新建一篇文章&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/&amp;lt;names&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如需要发布文章，记得把draft: true改为draft: false. 参考 &lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;draft&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;预览网站&#34;&gt;预览网站&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网站配置文件是config.toml，如可配置语言选项为languageCode = “zh-Hans”,网站名字等&lt;/p&gt;

&lt;h2 id=&#34;生成静态文件&#34;&gt;生成静态文件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这个就很简单啦, 直接运行hugo命令生成静态网页，放在public目录下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后, 提交public到GitHub 然后开启gh-pages即可预览&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 26 Oct 2019 09:12:06 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>

&lt;h3 id=&#34;大家好&#34;&gt;大家好&lt;/h3&gt;

&lt;p&gt;这是我第一篇博客, 谢谢大家&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>