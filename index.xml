<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wangyujie on Wangyujie</title>
    <link>https://wangyujie1207.github.io/</link>
    <description>Recent content in Wangyujie on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 29 Oct 2019 13:53:28 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Collection初步接触</title>
      <link>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Tue, 29 Oct 2019 13:53:28 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;java集合的集成体系&#34;&gt;Java集合的集成体系&lt;/h1&gt;

&lt;p&gt;Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。一张图看出Java collection的重要性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;list&#34;&gt;List&lt;/h3&gt;

&lt;p&gt;list add时,容量看起来无限,实际内部进行了扩容,扩容大小为当前容量的一半&lt;/p&gt;

&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不允许出现重复的元素&lt;/li&gt;
&lt;li&gt;集合中的元素位置无顺序&lt;/li&gt;
&lt;li&gt;有且只有一个值为null的元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为set是一个抽象的接口，所以不能直接实例化一个set对象。（Set s = new Set()是错误的）&lt;/p&gt;

&lt;p&gt;Set接口的两大实现：HashSet、TreeSet&lt;/p&gt;

&lt;p&gt;HashSet 是无序的，如果要保持顺序，可以使用LinkedHashSet.&lt;/p&gt;

&lt;h3 id=&#34;hashmap和hashset&#34;&gt;HashMap和HashSet&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HashSet

&lt;ul&gt;
&lt;li&gt;HashSet实现了Set接口，不允许集合中有重复的值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;HashMap

&lt;ul&gt;
&lt;li&gt;HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键&lt;/li&gt;
&lt;li&gt;Map接口的俩个基本实现：HashMap和TreeMap，TreeMap保存了对象的排列次序，而HashMap则不能。&lt;/li&gt;
&lt;li&gt;HashMap允许键和值为null&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://wangyujie1207.github.io/images/2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;collection中常用的方法&#34;&gt;Collection中常用的方法&lt;/h3&gt;

&lt;p&gt;Guava 集合工具类库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//添加方法：
add(Object o) //添加指定元素
addAll(Collection c) //添加指定集合
//删除方法：
remove(Object o) //删除指定元素
removeAll(Collection c) //输出两个集合的交集
retainAll(Collection c) //保留两个集合的交集
clear() //清空集合
//查询方法：
size() //集合中的有效元素个数
toArray() //将集合中的元素转换成Object类型数组
//判断方法：
isEmpty() //判断是否为空
equals(Object o) //判断是否与指定元素相同
contains(Object o) //判断是否包含指定元素
containsAll(Collection c) //判断是否包含指定集合
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arraylist中特有的方法&#34;&gt;ArrayList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ensureCapacity(int minCapactiy) //判断当前数组中的元素个数是否大于指定的minCapacity
trimToSize() //修改数组容量为当前数组有效元素个数
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;linkedlist中特有的方法&#34;&gt;LinkedList中特有的方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;//查询方法：
getFirst() //获取集合中的第一个元素
getLast() //获取集合中的最后一个元素
//添加方法：
addFirst(Object o) //在集合的第一个位置添加指定元素
addLast(Object o) //在集合的最后一个位置添加指定元素
//删除方法：
removeFirst() //删除集合中的第一个元素
removeLast() //删除集合中的最后一个元素
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Maven与Java包的初级接触</title>
      <link>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Mon, 28 Oct 2019 13:46:32 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</guid>
      <description>

&lt;h1 id=&#34;什么是maven&#34;&gt;什么是maven&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Maven是一个采用纯Java编写的开源项目管理工具, Maven采用了一种被称之为
Project Object Model (POM)概念来管理项目，所有的项目配置信息都被定
义在一个叫做POM.xml的文件中..
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;仓库&#34;&gt;仓库&lt;/h1&gt;

&lt;h2 id=&#34;本地仓库&#34;&gt;本地仓库&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maven会把我们项目所构建出来的jar包等等资源存放在本地仓库中。当我们需要jar包的时候，Maven第一时间也是去本地仓库中寻找jar包&lt;/p&gt;

&lt;h2 id=&#34;中心仓库&#34;&gt;中心仓库&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;** 当Maven在本地仓库和私服找不到我们需要的jar包的时候，就去中心仓库中帮我们下载对应的jar包**。那Maven怎么知道去哪里下载呢？？其实Maven已经配置好的了
apache-maven-3.2.1\lib\maven-model-builder-3.2.1\org\apache\maven\model下的POM.xml文件中已经配置好了&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven坐标&#34;&gt;maven坐标&lt;/h2&gt;

&lt;h4 id=&#34;坐标的组成-groupid-artifactid-version&#34;&gt;坐标的组成： groupId + artifactId+ version&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;* groupId：组id ,机构名，公司名：好比公司的id，或者是公司包名 alibaba ——-》高德--》5.01版本
* artifactId：构建物id ，产品名或者产品的id
* version ：版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;jar包组成-artifactid-version-jar&#34;&gt;jar包组成： artifactId-version.jar&lt;/h4&gt;

&lt;p&gt;scope应用范围有test、compile等等，默认是compile，那么test和compile有什么区别呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;间接依赖问题 ：依赖的jar包必须是 compile 范围，假如是test范围，则发布的jar包不会包含test范围依赖的jar包，和依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;java的包管理机制&#34;&gt;Java的包管理机制&lt;/h1&gt;

&lt;p&gt;##. 什么是包
* JVM的工作被设计得相当简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 执行一个类的字节码
2. 假如这个过程中碰到了新的类，加载他
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;那么去哪里加载他呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;类路径-classpath&#34;&gt;类路径（Classpath）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;什么是类路径：-classpath/-cp&lt;/li&gt;
&lt;li&gt;类的全限定类名（目录层级）唯一确定了一个类&lt;/li&gt;
&lt;li&gt;包就是把许多类放在一起打的压缩包&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;classpath-hell&#34;&gt;Classpath hell&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;传递性依赖是指你依赖的类还依赖了别的类&lt;/li&gt;
&lt;li&gt;全限定类名是类的唯一标识&lt;/li&gt;
&lt;li&gt;当多个同名类同时出现在Classpath中，就是噩梦的开始&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;什么是包管理&#34;&gt;什么是包管理&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;你要使用一些第三方类，就要告诉JVM从哪里找&lt;/li&gt;
&lt;li&gt;包管理的实质就是告诉JVM如何找到所需的第三方库以及成功地解决其中地冲突问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;maven-划时代的包管理工具&#34;&gt;Maven——划时代的包管理工具&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;约定优于配置（Convention over configuration）&lt;/li&gt;
&lt;li&gt;必须强调，Maven远远不止是包管理工具&lt;/li&gt;
&lt;li&gt;Maven的包按照约定为所有的包编号，方便检索，groupId/artifactId/version&lt;/li&gt;
&lt;li&gt;依赖冲突的解决原则：最近的胜出&lt;/li&gt;
&lt;li&gt;当你看到如下异常的时候：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* AbstractMethodError
* NoClassDefFoundError
* ClassNotFoundException
* LinkageError
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;一般就是包冲突了，解决方法：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;* 单独声明需要引用的特定包
* 排除掉冲突的包
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://wangyujie1207.github.io/about/</link>
      <pubDate>Sat, 26 Oct 2019 14:24:03 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/about/</guid>
      <description>&lt;p&gt;关于我&lt;/p&gt;

&lt;p&gt;这是一台木得感情的代码机器&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记录一下hugo搭建博客的经历</title>
      <link>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sat, 26 Oct 2019 11:03:42 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>

&lt;h1 id=&#34;安装hugo-参考-hugo搭建-https-gohugo-io&#34;&gt;安装hugo, 参考 &lt;a href=&#34;https://gohugo.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;hugo搭建&lt;/a&gt;;&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;mac 安装
homebrew install hugo
hugo version
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;开始搭建博客&#34;&gt;开始搭建博客&lt;/h1&gt;

&lt;p&gt;找一个文件夹, hugo new site &amp;lt;网站名&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;如果需要部署到github-需要注意一下资源路径&#34;&gt;如果需要部署到GitHub, 需要注意一下资源路径&lt;/h4&gt;

&lt;h4 id=&#34;github页面有两种类型&#34;&gt;GitHub页面有两种类型&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;我用的第一种&#34;&gt;我用的第一种&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;hugo new site &amp;lt;names&amp;gt;.github.io-creator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;为网站添加一个主题&#34;&gt;为网站添加一个主题&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;lt;names&amp;gt;
git init
git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;新建一篇文章&#34;&gt;新建一篇文章&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo new posts/&amp;lt;names&amp;gt;.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如需要发布文章，记得把draft: true改为draft: false. 参考 &lt;a href=&#34;https://gohugo.io/getting-started/usage/#draft-future-and-expired-content&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;draft&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;预览网站&#34;&gt;预览网站&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo server -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;网站配置文件是config.toml，如可配置语言选项为languageCode = “zh-Hans”,网站名字等&lt;/p&gt;

&lt;h2 id=&#34;生成静态文件&#34;&gt;生成静态文件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这个就很简单啦, 直接运行hugo命令生成静态网页，放在public目录下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最后, 提交public到GitHub 然后开启gh-pages即可预览&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 26 Oct 2019 09:12:06 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>

&lt;h3 id=&#34;大家好&#34;&gt;大家好&lt;/h3&gt;

&lt;p&gt;这是我第一篇博客, 谢谢大家&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>