<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多线程 on Wangyujie</title>
    <link>https://wangyujie1207.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 多线程 on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 20 Feb 2020 14:48:39 +0800</lastBuildDate>
    
	<atom:link href="https://wangyujie1207.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析URL</title>
      <link>https://wangyujie1207.github.io/2020/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Thu, 20 Feb 2020 14:48:39 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2020/%E6%B5%85%E6%9E%90url/</guid>
      <description> URL 包含哪几部分，每部分分别有什么作用 举个例子，比如 “http://www.baidu.com/index.html?name=mo&amp;amp;age=25#dowell”，在这个例子中我们可以分成六部分； 1、传输协议：http，https 2、域名： 例www.baidu.com为网站名字。 baidu.com为一级域名，www是服务器 3、端口： 不填写的话默认走的是80端口号 4、路径 http://www.baidu.com/路径1/路径1.2。/表示根目录 5、携带的参数：？name=mo 6、哈希值：#dowell  DNS DNS就是把域名和IP地址联系在一起的服务，有了DNS服务器，你就不用输入IP地址来 访问一个网站，可以通过输入网址访问。  nslookup ip IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机 分配一个逻辑地址，以此来屏蔽物理地址的差异。 由于IP不好记，使用不访便慢慢被域名所代替，但是对计算机与计算机的基本通信还是 采用了这样的原则，只不过是通过建立一个DNS服务，DNS服务的主要是作用是将域名转化成IP 地址进访问题，不需要人们去记那些不好记的地址，而域名好记等。  ping 命令的用法 ping blog.gtwang.org  域名 域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指 地理位置）。 由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了 域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映 射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。  域名分类 1.类别域名(口语中常说国际域名)共有7个，也就是现在通常说的国际域名。由于 Internet最初是在美国发源的，因此最早的域名并无国家标识，人们按用途把它们 分为几个大类，它们分别以不同的后缀结尾：.com(用于商业公司);.net(用于网络 服务);.org(用于组织协会等);.gov(用于政府部门);.edu(用于教育机构);.mil (用于军事领域);.int(用于国际组织)。 2.是国别域名(地理顶级域名)，共有243个国家和地区的代码，例如.CN代表中国， .UK代表英国，.US代表美国。其中.cn是中国专用的顶级域名, 其注册归CNNIC管理 , 以.cn结尾的二级域名我们简称为国内域名。注册国家代码顶级域名下的二级域名 的规则和政策与不同的国家的政策有关。 3.是新顶级域名注册也就是所谓的“新顶级域名”，是ICANN根据互联网发展需要， 在2000年11月做出决议，从2001年开始使用的国际顶级域名，也包含7类：biz, info，name，pro，aero, coop, museum。 其中前4个是非限制性域，后3个 是限制性域，如aero需是航空业公司注册，museum需是博物馆，coop需是集体企 业(非投资人控制，无须利润最大化)注册。  </description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 05 Nov 2019 13:24:31 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description> 什么是多线程 多线程是指在同一程序中有多个顺序流在执行。
 什么是线程 为什么需要多线程 Java中的线程表示 多线程问题的来源 多线程的适用场景  同步与异步 同步和异步关注的是消息通信机制
 所谓同步，就是在发出一个调用时，会一直等待调用的返回结果。 而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。  阻塞与非阻塞 阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.
 阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。 非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。  为什么需要多线程  因为java的执行模型：最初是同步/阻塞的，且默认情况下只有一个线程，但是事件太多会导致等待时间过长或当线程被挂起会导致后面的事务无法进行，因此需要多线程。 CPU快，现代CPU都是多核，因此可以通过多线程来提高性能问题  CPU进程的时间：由操作系统决定CPU每一个进程每一个线程可以占据多少时间，如果超时，CPU会强制让它终止去执行下一个。  Java中的线程表示 Thread  Java中只有这么⼀种东⻄代表线程 start⽅法才能并发执⾏！  start方法执行，无需等待 run方法执行，等待完成再做下件事情，必须要start，不然创建了线程也没有并行执行 新的线程入口是run  每多开⼀个线程，就多⼀个执⾏流 多线程执行时是乱序的 ⽅法栈(局部变量)是线程私有的 静态变量/类变量是被所有线程共享的  多线程带来的问题 多线程的难点是，变量被所有线程共享时候，可能会出问题，譬如多线程执行i++，因为i++不是原子操作。 一段代码可能同时有多个线程执行，是问题的来源。如线程1和线程2共同执行i++，因为变量不是原子的，将i写回时可能导致值就出问题了  多线程的生命周期 多线程使用的目的  吞吐量：做WEB，容器帮你做了多线程，但是它只能帮你做请求层面的，简单的说，就是一个请求一个线程(如struts2，是多线程的，每个客户端请求创建一个实例，保证线程安全)，或多个请求一个线程，如果是单线程，那只能是处理一个用户的请求 伸缩性：通过增加CPU核数来提升性能。  多线程的适用场景  常见的浏览器、Web服务(现在写的web是中间件帮你完成了线程的控制)，web处理请求，各种专用服务器(如游戏服务器) servlet多线程 FTP下载，多线程操作文件 数据库用到的多线程 分布式计算 tomcat，tomcat内部采用多线程，上百个客户端访问同一个WEB应用，tomcat接入后就是把后续的处理扔给一个新的线程来处理，这个新的线程最后调用我们的servlet程序，比如doGet或者dpPost方法 后台任务：如定时向大量(100W以上)的用户发送邮件；定期更新配置文件、任务调度(如quartz)，一些监控用于定期信息采集 自动作业处理：比如定期备份日志、定期备份数据库 异步处理：如发微博、记录日志 页面异步处理：比如大批量数据的核对工作(有10万个手机号码，核对哪些是已有用户) 数据库的数据分析(待分析的数据太多)，数据迁移 多步骤的任务处理，可根据步骤特征选用不同个数和特征的线程来协作处理，多任务的分割，由一个主线程分割给多个线程完成 desktop应用开发，一个费时的计算开个线程，前台加个进度条显示 swing编程  </description>
    </item>
    
  </channel>
</rss>