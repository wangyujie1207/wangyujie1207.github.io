<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>express on Wangyujie</title>
    <link>https://wangyujie1207.github.io/tags/express/</link>
    <description>Recent content in express on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    
	<atom:link href="https://wangyujie1207.github.io/tags/express/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>express_api</title>
      <link>https://wangyujie1207.github.io/1/express_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangyujie1207.github.io/1/express_api/</guid>
      <description>Express API 总结 先来个基本操作 const express = require(&#39;express&#39;); let app = express(); app.get(&#39;/&#39;, function(req, res) { res.send(&#39;hello world&#39;); }); let server = app.listen(3000, function() { let host = server.address().address; let port = server.address().port; console.log(`app listening at port: ${port}`); });  express.xxx - 内置中间件 json([option]) 内置中间件,解析传入的请求
app.use(express.json()) app.use((request, response, next) =&amp;gt; { const jsonObj = request.body })  static(root，[option]) 内置中间件为，创建一个静态文件服务器，根据 req.url 来寻找对应的文件
text([option]) 内置中间件，将传入的请求参数解析为字符串
Router([option]) 创建一个 router 对象，对路由进行响应
app.xxx - 应用设置 app.</description>
    </item>
    
  </channel>
</rss>