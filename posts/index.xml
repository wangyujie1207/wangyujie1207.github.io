<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wangyujie</title>
    <link>https://wangyujie1207.github.io/posts/</link>
    <description>Recent content in Posts on Wangyujie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 14 Nov 2019 15:52:24 +0800</lastBuildDate>
    
	<atom:link href="https://wangyujie1207.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>检讨书</title>
      <link>https://wangyujie1207.github.io/2019/%E6%A3%80%E8%AE%A8%E4%B9%A6/</link>
      <pubDate>Thu, 14 Nov 2019 15:52:24 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E6%A3%80%E8%AE%A8%E4%B9%A6/</guid>
      <description>吵架转身就走是不对的 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 拉罗什夫科说过一句富有哲理的话，取得成就时坚持不懈，要比遭到失败时顽强不屈更重要。这似乎解答了我的疑惑。 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 一般来说， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 从这个角度来看， 在这种困难的抉择下，本人思来想去，寝食难安。 那么， 日本谚语在不经意间这样说过，不幸可能成为通向幸福的桥梁。这似乎解答了我的疑惑。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;既然如此， 我认为， 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 带着这些问题，我们来审视一下吵架转身就走是不对的。 每个人都不得不面对这些问题。 在面对这种问题时， 现在，解决吵架转身就走是不对的的问题，是非常非常重要的。 所以， 那么， 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这启发了我， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 总结的来说， 歌德在不经意间这样说过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。带着这句话，我们还要更加慎重的审视这个问题： 那么， 吵架转身就走是不对的，到底应该如何实现。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 可是，即使是这样，吵架转身就走是不对的的出现仍然代表了一定的意义。 我们都知道，只要有意义，那么就必须慎重考虑。 富兰克林在不经意间这样说过，读书是易事，思索是难事，但两者缺一，便全无用处。我希望诸位也能好好地体会这句话。 这样看来， 塞涅卡在不经意间这样说过，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。这句话语虽然很短，但令我浮想联翩。 既然如此， 吵架转身就走是不对的因何而发生？ 黑格尔曾经说过，只有永远躺在泥坑里的人，才不会再掉进坑里。这不禁令我深思。 问题的关键究竟为何。
　就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 吵架转身就走是不对的的发生，到底需要如何做到，不吵架转身就走是不对的的发生，又会如何产生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 莎士比亚曾经说过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 那么， 笛卡儿曾经提到过，读一切好书，就是和许多高尚的人谈话。这似乎解答了我的疑惑。 带着这些问题，我们来审视一下吵架转身就走是不对的。 一般来说， 就我个人来说，吵架转身就走是不对的对我的意义，不能不说非常重大。 我们不得不面对一个非常尴尬的事实，那就是， 史美尔斯曾经提到过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这启发了我， 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 我认为， 经过上述讨论， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 这样看来， 西班牙曾经提到过，自己的鞋子，自己知道紧在哪里。这启发了我， 吉姆·罗恩说过一句富有哲理的话，要么你主宰生活，要么你被生活主宰。这似乎解答了我的疑惑。 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 吵架转身就走是不对的，到底应该如何实现。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 了解清楚吵架转身就走是不对的到底是一种怎么样的存在，是解决一切问题的关键。 冯学峰曾经说过，当一个人用工作去迎接光明，光明很快就会来照耀着他。这不禁令我深思。 迈克尔·F·斯特利说过一句富有哲理的话，最具挑战性的挑战莫过于提升自我。这句话语虽然很短，但令我浮想联翩。 而这些并不是完全重要，更加重要的问题是， 对我个人而言，吵架转身就走是不对的不仅仅是一个重大的事件，还可能会改变我的人生。 每个人都不得不面对这些问题。 在面对这种问题时， 在这种困难的抉择下，本人思来想去，寝食难安。 每个人都不得不面对这些问题。 在面对这种问题时， 而这些并不是完全重要，更加重要的问题是， 总结的来说， 吵架转身就走是不对的，发生了会如何，不发生又会如何。 我们不得不面对一个非常尴尬的事实，那就是， 那么， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 爱迪生曾经说过，失败也是我需要的，它和成功对我一样有价值。带着这句话，我们还要更加慎重的审视这个问题： 而这些并不是完全重要，更加重要的问题是， 既然如何， 这样看来， 文森特·皮尔曾经说过，改变你的想法，你就改变了自己的世界。带着这句话，我们还要更加慎重的审视这个问题： 生活中，若吵架转身就走是不对的出现了，我们就不得不考虑它出现了的事实。 吵架转身就走是不对的因何而发生？ 爱尔兰曾经说过，越是无能的人，越喜欢挑剔别人的错儿。这启发了我， 总结的来说， 要想清楚，吵架转身就走是不对的，到底是一种怎么样的存在。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们都知道，只要有意义，那么就必须慎重考虑。 我们都知道，只要有意义，那么就必须慎重考虑。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 05 Nov 2019 13:24:31 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description> 什么是多线程 多线程是指在同一程序中有多个顺序流在执行。
 什么是线程 为什么需要多线程 Java中的线程表示 多线程问题的来源 多线程的适用场景  同步与异步 同步和异步关注的是消息通信机制
 所谓同步，就是在发出一个调用时，会一直等待调用的返回结果。 而异步则是相反，调用在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。  阻塞与非阻塞 阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.
 阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。 非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。  为什么需要多线程  因为java的执行模型：最初是同步/阻塞的，且默认情况下只有一个线程，但是事件太多会导致等待时间过长或当线程被挂起会导致后面的事务无法进行，因此需要多线程。 CPU快，现代CPU都是多核，因此可以通过多线程来提高性能问题  CPU进程的时间：由操作系统决定CPU每一个进程每一个线程可以占据多少时间，如果超时，CPU会强制让它终止去执行下一个。  Java中的线程表示 Thread  Java中只有这么⼀种东⻄代表线程 start⽅法才能并发执⾏！  start方法执行，无需等待 run方法执行，等待完成再做下件事情，必须要start，不然创建了线程也没有并行执行 新的线程入口是run  每多开⼀个线程，就多⼀个执⾏流 多线程执行时是乱序的 ⽅法栈(局部变量)是线程私有的 静态变量/类变量是被所有线程共享的  多线程带来的问题 多线程的难点是，变量被所有线程共享时候，可能会出问题，譬如多线程执行i++，因为i++不是原子操作。 一段代码可能同时有多个线程执行，是问题的来源。如线程1和线程2共同执行i++，因为变量不是原子的，将i写回时可能导致值就出问题了  多线程的生命周期 多线程使用的目的  吞吐量：做WEB，容器帮你做了多线程，但是它只能帮你做请求层面的，简单的说，就是一个请求一个线程(如struts2，是多线程的，每个客户端请求创建一个实例，保证线程安全)，或多个请求一个线程，如果是单线程，那只能是处理一个用户的请求 伸缩性：通过增加CPU核数来提升性能。  多线程的适用场景  常见的浏览器、Web服务(现在写的web是中间件帮你完成了线程的控制)，web处理请求，各种专用服务器(如游戏服务器) servlet多线程 FTP下载，多线程操作文件 数据库用到的多线程 分布式计算 tomcat，tomcat内部采用多线程，上百个客户端访问同一个WEB应用，tomcat接入后就是把后续的处理扔给一个新的线程来处理，这个新的线程最后调用我们的servlet程序，比如doGet或者dpPost方法 后台任务：如定时向大量(100W以上)的用户发送邮件；定期更新配置文件、任务调度(如quartz)，一些监控用于定期信息采集 自动作业处理：比如定期备份日志、定期备份数据库 异步处理：如发微博、记录日志 页面异步处理：比如大批量数据的核对工作(有10万个手机号码，核对哪些是已有用户) 数据库的数据分析(待分析的数据太多)，数据迁移 多步骤的任务处理，可根据步骤特征选用不同个数和特征的线程来协作处理，多任务的分割，由一个主线程分割给多个线程完成 desktop应用开发，一个费时的计算开个线程，前台加个进度条显示 swing编程  </description>
    </item>
    
    <item>
      <title>Collection初步接触</title>
      <link>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Tue, 29 Oct 2019 13:53:28 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/collection%E5%88%9D%E6%AD%A5%E6%8E%A5%E8%A7%A6/</guid>
      <description> Java集合的集成体系 Java的集合类主要由两个接口派生而出：Collection和Map,Collection和Map是Java集合框架的根接口。一张图看出Java collection的重要性
 Collection接口是Set,Queue,List的父接口。Collection接口中定义了多种方法可供其子类进行实现，以实现数据操作。  List list add时,容量看起来无限,实际内部进行了扩容,扩容大小为当前容量的一半
Set  不允许出现重复的元素 集合中的元素位置无顺序 有且只有一个值为null的元素  因为set是一个抽象的接口，所以不能直接实例化一个set对象。（Set s = new Set()是错误的）
Set接口的两大实现：HashSet、TreeSet
HashSet 是无序的，如果要保持顺序，可以使用LinkedHashSet.
HashMap和HashSet  HashSet  HashSet实现了Set接口，不允许集合中有重复的值  HashMap  HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键 Map接口的俩个基本实现：HashMap和TreeMap，TreeMap保存了对象的排列次序，而HashMap则不能。 HashMap允许键和值为null   Collection中常用的方法 Guava 集合工具类库
//添加方法： add(Object o) //添加指定元素 addAll(Collection c) //添加指定集合 //删除方法： remove(Object o) //删除指定元素 removeAll(Collection c) //输出两个集合的交集 retainAll(Collection c) //保留两个集合的交集 clear() //清空集合 //查询方法： size() //集合中的有效元素个数 toArray() //将集合中的元素转换成Object类型数组 //判断方法： isEmpty() //判断是否为空 equals(Object o) //判断是否与指定元素相同 contains(Object o) //判断是否包含指定元素 containsAll(Collection c) //判断是否包含指定集合  ArrayList中特有的方法 ensureCapacity(int minCapactiy) //判断当前数组中的元素个数是否大于指定的minCapacity trimToSize() //修改数组容量为当前数组有效元素个数  LinkedList中特有的方法 //查询方法： getFirst() //获取集合中的第一个元素 getLast() //获取集合中的最后一个元素 //添加方法： addFirst(Object o) //在集合的第一个位置添加指定元素 addLast(Object o) //在集合的最后一个位置添加指定元素 //删除方法： removeFirst() //删除集合中的第一个元素 removeLast() //删除集合中的最后一个元素  </description>
    </item>
    
    <item>
      <title>Maven与Java包的初级接触</title>
      <link>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</link>
      <pubDate>Mon, 28 Oct 2019 13:46:32 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/maven%E4%B8%8Ejava%E5%8C%85%E7%9A%84%E5%88%9D%E7%BA%A7%E6%8E%A5%E8%A7%A6/</guid>
      <description> 什么是maven Maven是一个采用纯Java编写的开源项目管理工具, Maven采用了一种被称之为 Project Object Model (POM)概念来管理项目，所有的项目配置信息都被定 义在一个叫做POM.xml的文件中..   Maven主要服务于基于Java平台的项目构建、依赖管理和项目信息管理&amp;hellip;  仓库 本地仓库  Maven会把我们项目所构建出来的jar包等等资源存放在本地仓库中。当我们需要jar包的时候，Maven第一时间也是去本地仓库中寻找jar包
中心仓库 ** 当Maven在本地仓库和私服找不到我们需要的jar包的时候，就去中心仓库中帮我们下载对应的jar包**。那Maven怎么知道去哪里下载呢？？其实Maven已经配置好的了 apache-maven-3.2.1\lib\maven-model-builder-3.2.1\org\apache\maven\model下的POM.xml文件中已经配置好了
  maven坐标 坐标的组成： groupId + artifactId+ version * groupId：组id ,机构名，公司名：好比公司的id，或者是公司包名 alibaba ——-》高德--》5.01版本 * artifactId：构建物id ，产品名或者产品的id * version ：版本号  jar包组成： artifactId-version.jar scope应用范围有test、compile等等，默认是compile，那么test和compile有什么区别呢？
 间接依赖问题 ：依赖的jar包必须是 compile 范围，假如是test范围，则发布的jar包不会包含test范围依赖的jar包，和依赖关系  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;  Java的包管理机制 ##. 什么是包 * JVM的工作被设计得相当简单：
1. 执行一个类的字节码 2. 假如这个过程中碰到了新的类，加载他   那么去哪里加载他呢？  类路径（Classpath）  什么是类路径：-classpath/-cp 类的全限定类名（目录层级）唯一确定了一个类 包就是把许多类放在一起打的压缩包  Classpath hell  传递性依赖是指你依赖的类还依赖了别的类 全限定类名是类的唯一标识 当多个同名类同时出现在Classpath中，就是噩梦的开始  什么是包管理  你要使用一些第三方类，就要告诉JVM从哪里找 包管理的实质就是告诉JVM如何找到所需的第三方库以及成功地解决其中地冲突问题  Maven——划时代的包管理工具  约定优于配置（Convention over configuration） 必须强调，Maven远远不止是包管理工具 Maven的包按照约定为所有的包编号，方便检索，groupId/artifactId/version 依赖冲突的解决原则：最近的胜出 当你看到如下异常的时候：  * AbstractMethodError * NoClassDefFoundError * ClassNotFoundException * LinkageError   一般就是包冲突了，解决方法：  * 单独声明需要引用的特定包 * 排除掉冲突的包  </description>
    </item>
    
    <item>
      <title>记录一下hugo搭建博客的经历</title>
      <link>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Sat, 26 Oct 2019 11:03:42 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>安装hugo, 参考 hugo搭建; mac 安装 homebrew install hugo hugo version  开始搭建博客 找一个文件夹, hugo new site &amp;lt;网站名&amp;gt;
hugo new site quickstart  如果需要部署到GitHub, 需要注意一下资源路径 GitHub页面有两种类型  https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/ https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/  我用的第一种 hugo new site &amp;lt;names&amp;gt;.github.io-creator  为网站添加一个主题 cd &amp;lt;names&amp;gt; git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  新建一篇文章 hugo new posts/&amp;lt;names&amp;gt;.md  如需要发布文章，记得把draft: true改为draft: false. 参考 draft
预览网站 hugo server -D  网站配置文件是config.toml，如可配置语言选项为languageCode = “zh-Hans”,网站名字等</description>
    </item>
    
    <item>
      <title>第一篇博客</title>
      <link>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 26 Oct 2019 09:12:06 +0800</pubDate>
      
      <guid>https://wangyujie1207.github.io/2019/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>大家好 这是我第一篇博客, 谢谢大家</description>
    </item>
    
  </channel>
</rss>